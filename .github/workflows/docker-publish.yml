name: Docker Build and Release

on:
  push:
    branches: [ main, test-docker-push ]
  pull_request:
    branches: [ main, test-docker-push ]
    types: [ closed ]

env:
  REGISTRY: docker.io
  IMAGE_NAME: qutora/qutora-api

jobs:
  build-and-release:
    if: >
      (
        github.event_name == 'pull_request' &&
        github.event.pull_request.merged == true &&
        contains(github.event.pull_request.title, '[release]')
      )
      ||
      (
        github.event_name == 'push' &&
        (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/test-docker-push') &&
        contains(github.event.head_commit.message, '[release]')
      )
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
    outputs:
      new-version: ${{ steps.get-version.outputs.new-version }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Get latest version from Docker Hub
        id: get-version
        run: |
          LATEST_TAG=$(curl -s "https://hub.docker.com/v2/repositories/${{ env.IMAGE_NAME }}/tags/?page_size=100" \
            | jq -r '.results[].name' \
            | grep -E '^v[0-9]+\.[0-9]+\.[0-9]+$' \
            | sort -V | tail -1)
          if [ -z "$LATEST_TAG" ] || [ "$LATEST_TAG" = "null" ]; then
            LATEST_TAG="v1.0.0"
            echo "No previous version found, starting with v1.0.0"
          fi
          VERSION_WITHOUT_V=${LATEST_TAG#v}
          IFS='.' read -r major minor patch <<< "$VERSION_WITHOUT_V"
          NEW_PATCH=$((patch + 1))
          NEW_VERSION="v$major.$minor.$NEW_PATCH"
          if [[ "${{ github.event_name == 'pull_request' && github.event.pull_request.title || github.event.head_commit.message }}" == *"[preview]"* ]]; then
            NEW_VERSION="$NEW_VERSION-preview"
          fi
          echo "new-version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "version-number=${NEW_VERSION#v}" >> $GITHUB_OUTPUT

      - name: Generate Docker tags
        id: meta
        run: |
          NEW_VERSION=${{ steps.get-version.outputs.new-version }}
          VERSION_NUMBER=${{ steps.get-version.outputs.version-number }}
          TAGS="${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:$NEW_VERSION"
          if [[ "$NEW_VERSION" != *"-preview"* ]]; then
            IFS='.' read -r major minor patch <<< "$VERSION_NUMBER"
            TAGS="$TAGS,${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:v$major.$minor"
            TAGS="$TAGS,${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:v$major"
            TAGS="$TAGS,${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest"
          else
            TAGS="$TAGS,${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:preview"
          fi
          echo "tags=$TAGS" >> $GITHUB_OUTPUT

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: |
            org.opencontainers.image.title=Qutora Document Management System
            org.opencontainers.image.description=Enterprise document management system with multi-database support
            org.opencontainers.image.version=${{ steps.get-version.outputs.new-version }}
            org.opencontainers.image.created=${{ github.event.head_commit.timestamp }}
            org.opencontainers.image.revision=${{ github.sha }}
            org.opencontainers.image.licenses=MIT
          build-args: |
            VERSION=${{ steps.get-version.outputs.new-version }}
            BUILD_DATE=${{ github.event.head_commit.timestamp }}
            VCS_REF=${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Test Docker image
        run: |
          TEST_TAG="${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.get-version.outputs.new-version }}"
          docker run --rm -d \
            --name qutora-test \
            -p 8080:8080 \
            -e Database__Provider=SqlServer \
            -e ConnectionStrings__DefaultConnection="Data Source=test.db" \
            -e Jwt__Key="test_jwt_secret_key_32_characters_minimum_length_required" \
            "$TEST_TAG"
          echo "Waiting for container to start..."
          sleep 20
          if curl -f http://localhost:8080/health; then
            echo "‚úÖ Health check passed!"
          else
            echo "‚ö†Ô∏è Health check failed (expected without real database)"
          fi
          docker stop qutora-test
          echo "‚úÖ Docker image test completed"

      - name: Create GitHub Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        uses: actions/create-release@v1
        with:
          tag_name: ${{ steps.get-version.outputs.new-version }}
          release_name: "Release ${{ steps.get-version.outputs.new-version }}"
          body: |
            ## Qutora Document Management System ${{ steps.get-version.outputs.new-version }}
            üê≥ **Docker Image**: `docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.get-version.outputs.new-version }}`
            ### üöÄ Quick Start
            ```bash
            docker run -d \
              --name qutora-api \
              -p 8080:8080 \
              -e Database__Provider=SqlServer \
              -e ConnectionStrings__DefaultConnection="your-connection-string" \
              -e Jwt__Key="your-jwt-secret-key" \
              ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.get-version.outputs.new-version }}
            ```
          draft: false
          prerelease: ${{ contains(steps.get-version.outputs.new-version, 'preview') }}

  skip-notification:
    if: >
      (
        github.event_name == 'pull_request' &&
        github.event.pull_request.merged == true &&
        !contains(github.event.pull_request.title, '[release]')
      )
      ||
      (
        github.event_name == 'push' &&
        (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/test-docker-push') &&
        !contains(github.event.head_commit.message, '[release]')
      )
    runs-on: ubuntu-latest
    steps:
      - name: Skip Release Notification
        run: |
          echo "‚è≠Ô∏è Skipping Docker release - no [release] tag found"
